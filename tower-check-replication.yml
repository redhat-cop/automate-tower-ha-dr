---

- name: Check replication status
  hosts: database_replica:database
  gather_facts: yes
  become: true
  become_user: postgres
  vars:
    replication_time_threshold: 100
  vars_files: tower-vars.yml
  tasks:
  - name: high level block to determine if db replication is managed by toolkit
    block:

    - name: check replication status and latency
      postgresql_query:
        db: "postgres"
        query: "select extract(epoch from now() - pg_last_xact_replay_timestamp());"
      register: replication_latency
      changed_when: false
      when: "'database_replica' in group_names"

    - name: Ensure replication latency within threshold
      assert:
        that:
        - replication_latency.query_result[0].date_part | float < replication_time_threshold
        fail_msg: "Replication latency {{ replication_latency.query_result[0].date_part | float }} is above {{ replication_time_threshold }}"
        success_msg: "Replication latency is {{ replication_latency.query_result[0].date_part | float }}"
      when: "'database_replica' in group_names"

    - name: Check recovery mode
      postgresql_query:
        db: "postgres"
        query: "select pg_is_in_recovery();"
      register: recovery_mode
      changed_when: false

    - name: Ensure recovery mode is set to true on replica(s)
      assert:
        that:
        - recovery_mode.query_result[0].pg_is_in_recovery
        fail_msg: "Recovery mode is {{ recovery_mode.query_result[0].pg_is_in_recovery }}"
      when: "'database_replica' in group_names"

    - name: Ensure recovery mode is set to false on primary
      assert:
        that:
        - not recovery_mode.query_result[0].pg_is_in_recovery
        fail_msg: "Recovery mode is {{ recovery_mode.query_result[0].pg_is_in_recovery }}"
      when: "'database' in group_names"

    - name: get master db  configured on tower nodes
      shell: awx-manage print_settings | grep -oP "^DATABASES *= \K.*"
      register: db_info_cmd
      delegate_to: "{{ groups['tower'][0] }}"
      become_user: root
      changed_when: false
      run_once: true
      no_log: true

    - set_fact:
        db_host: "{{ _db_info.default.HOST }}"
      vars:
        _db_info: "{{ db_info_cmd.stdout | to_json | from_json }}"
      run_once: true
      no_log: true

    - name: Ensure proper configured db for tower nodes
      assert:
        that:
        - pg_host == db_host
        success_msg: "Configured db is {{ db_host }}"
        fail_msg: "Configured db is {{ db_host }} should be {{ pg_host }}"
      run_once: true

    when: not tower_db_external
